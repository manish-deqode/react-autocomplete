{"version":3,"sources":["Api/index.js","Components/AutoComplete/index.jsx","Pages/Dashboard/index.jsx","Routes/index.jsx","App.js","reportWebVitals.js","index.js","Components/AutoComplete/index.module.css"],"names":["getRandomBool","n","maxRandomCoeff","Math","floor","random","getSuggestions","text","post","results","push","Promise","resolve","reject","randomTimeout","setTimeout","AutoComplete","wrapperRef","useRef","inputRef","useState","inputValue","options","activeIndex","searchedWord","showOptions","allWords","pageState","setPageState","handlePageState","newStates","prevStates","useEffect","timer","current","value","slice","selectionStart","length","inputs","split","filter","word","lastWordFromInput","test","includes","shift","then","suggestions","catch","err","clearTimeout","handleClickOutside","useCallback","event","contains","target","document","addEventListener","removeEventListener","highlightOption","option","replace","RegExp","match","styles","highlight","onSelectOption","inputOption","undefined","concat","updatedValue","currentPointer","start","end","trim","focus","ref","className","searchContainer","inputSearch","type","spellCheck","onChange","preventDefault","onKeyDown","keyCode","optionsContainer","map","index","activeOption","onClick","dangerouslySetInnerHTML","__html","Dashboard","Routes","basename","process","path","component","from","to","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById","module","exports"],"mappings":"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","file":"static/js/main.a10fe9dd.chunk.js","sourcesContent":["const FAILURE_COEFF = 10;\r\nconst MAX_SERVER_LATENCY = 200;\r\n\r\nfunction getRandomBool(n) {\r\n  const maxRandomCoeff = 1000;\r\n  if (n > maxRandomCoeff) n = maxRandomCoeff;\r\n  return Math.floor(Math.random() * maxRandomCoeff) % n === 0;\r\n}\r\n\r\nfunction getSuggestions(text) {\r\n  const pre = \"pre\";\r\n  const post = \"post\";\r\n  const results = [];\r\n  if (getRandomBool(2)) {\r\n    results.push(pre + text);\r\n  }\r\n  if (getRandomBool(2)) {\r\n    results.push(text);\r\n  }\r\n  if (getRandomBool(2)) {\r\n    results.push(text + post);\r\n  }\r\n  if (getRandomBool(2)) {\r\n    results.push(pre + text + post);\r\n  }\r\n  return new Promise((resolve, reject) => {\r\n    const randomTimeout = Math.random() * MAX_SERVER_LATENCY;\r\n    setTimeout(() => {\r\n      if (getRandomBool(FAILURE_COEFF)) {\r\n        reject();\r\n      } else {\r\n        resolve(results);\r\n      }\r\n    }, randomTimeout);\r\n  });\r\n}\r\n\r\nexport default getSuggestions;","import React, { useState, useRef, useEffect, useCallback } from \"react\";\r\nimport getSuggestions from \"../../Api/index\";\r\nimport styles from \"./index.module.css\";\r\n\r\nconst AutoComplete = () => {\r\n    const wrapperRef = useRef();\r\n    const inputRef = useRef();\r\n    const [pageState, setPageState] = useState({\r\n        inputValue: \"\",\r\n        options: [],\r\n        activeIndex: 0,\r\n        searchedWord: \"\",\r\n        showOptions: false,\r\n        allWords: []\r\n    });\r\n\r\n    const handlePageState = (newStates) => {\r\n        setPageState((prevStates) => {\r\n        return {\r\n            ...prevStates,\r\n            ...newStates\r\n        };\r\n        });\r\n    }\r\n\r\n    useEffect(() => {\r\n        // Add timeout in API call. When user give short pause in typing then API will call\r\n        const timer = setTimeout(() => {\r\n            if (pageState.inputValue === inputRef.current.value) {\r\n                // Do not show suggestions if input value is empty\r\n                if (pageState.inputValue !== \"\") {\r\n                    const lastCharacter = pageState.inputValue.slice(-1);\r\n                    // Do not show suggestions if last character is space\r\n                    if (lastCharacter === \" \" && inputRef.current.selectionStart === pageState.inputValue.length) {\r\n                        handlePageState({ options: [], activeIndex: 0 });\r\n                        return;\r\n                    }\r\n                    \r\n                    const inputs = pageState.inputValue.split(\" \").filter(\r\n                        (word) => word !== \"\");\r\n                    // Find suggestions based on last word\r\n                    let lastWordFromInput = inputs[inputs.length - 1];\r\n                    if(pageState.allWords.length) { \r\n                        const test = inputs.filter((word) => {\r\n                            return (pageState.allWords.includes(word) === false);\r\n                        });\r\n                        if(test.length && pageState.showOptions === true) {\r\n                            // Find suggestions based on changed word\r\n                            lastWordFromInput = test.shift();\r\n                        }\r\n                    }\r\n                    // Update all words\r\n                    handlePageState({ allWords: inputs });\r\n                    \r\n                    handlePageState({ searchedWord: lastWordFromInput });\r\n                    // Get All suggestions according to lastWordFromInput\r\n                    getSuggestions(lastWordFromInput).then((suggestions) => {\r\n                        handlePageState({ options: suggestions, activeIndex: 0, showOptions: true });\r\n                    }).catch((err) => {\r\n                        handlePageState({ options: [], activeIndex: 0 });\r\n                    });\r\n                } else {\r\n                    handlePageState({ options: [], activeIndex: 0, allWords: [] });\r\n                }\r\n            }\r\n        }, 500);\r\n        return () => {\r\n          clearTimeout(timer);\r\n        };\r\n    }, [pageState.inputValue, inputRef]);\r\n\r\n    // Close options when click outside of div\r\n    const handleClickOutside = useCallback((event) => {\r\n        if (wrapperRef.current && !wrapperRef.current.contains(event.target)) {\r\n        handlePageState({ showOptions: false });\r\n        }\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        // We are only listning to an Event. We are not manupulating in DOM\r\n        document.addEventListener('click', handleClickOutside, true);\r\n        return () => {\r\n            document.removeEventListener('click', handleClickOutside, true);\r\n        };\r\n    }, [handleClickOutside]);\r\n\r\n    // Highlights the matched characters in suggestions\r\n    const highlightOption = (option) => {\r\n        return option.replace(\r\n        new RegExp(pageState.searchedWord, \"gi\"),\r\n        (match) => `<span class=\"${styles.highlight}\">${match}</span>`\r\n        );\r\n    };\r\n\r\n    // Selecting suggestions through key press\r\n    const handleKeyPress = (event) => {\r\n        const { activeIndex, options } = pageState;\r\n        if (event.keyCode === 13) { //Enter key\r\n            onSelectOption(options[activeIndex]);\r\n        } else if (event.keyCode === 38) { //Up Arrow key\r\n            event.preventDefault();\r\n            if (activeIndex === 0) {\r\n                return;\r\n            }\r\n            handlePageState({ activeIndex: activeIndex - 1 });\r\n        } else if (event.keyCode === 40) { //Down Arrow key\r\n            event.preventDefault();\r\n            if (activeIndex === options.length - 1) {\r\n                return;\r\n            }\r\n            handlePageState({ activeIndex: activeIndex + 1 });\r\n        }\r\n    };\r\n\r\n    const handleInputChange = (event) => {\r\n        if (/[^A-Za-z0-9 ]/.test(event.target.value)) {\r\n            event.preventDefault();\r\n            return;\r\n        }\r\n        handlePageState({ inputValue: event.target.value });\r\n    };\r\n\r\n    // On select suggestion\r\n    const onSelectOption = (inputOption) => {\r\n        // If API does not return any result and value is selected, setting the typed value with space\r\n        if (inputOption === undefined) {\r\n          handlePageState({ inputValue: (pageState.inputValue !== \"\" && pageState.inputValue.slice(-1) !== \" \") ? pageState.inputValue.concat(\" \") : pageState.inputValue });\r\n        } else {    \r\n          let updatedValue = pageState.inputValue;\r\n            if (pageState.inputValue !== \"\") {\r\n                const currentPointer = inputRef.current.selectionStart;\r\n                let start = currentPointer - 1;\r\n                while(updatedValue[start] !== ' ' && start > 0) start = start - 1;\r\n                if (updatedValue[start] === ' ') start = start + 1;\r\n                let end = currentPointer;\r\n                while(updatedValue[end] !== ' ' && end < updatedValue.length) end = end + 1;\r\n                updatedValue = `${updatedValue.slice(0,start)}${inputOption}${end < updatedValue.length ? '' : ' '}${updatedValue.slice(end, updatedValue.length)}`;\r\n                updatedValue.trim();\r\n                if(updatedValue.slice(-1) !== ' ')\r\n                    updatedValue = `${updatedValue} `;\r\n                // Update all words\r\n                handlePageState({ allWords: updatedValue.split(\" \") });\r\n            }\r\n          handlePageState({ inputValue: updatedValue, activeIndex: 0, options: [] });\r\n        }\r\n    \r\n        // Set focus to input on select\r\n        if (inputRef && inputRef.current) {\r\n          inputRef.current.focus();\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div ref={wrapperRef} className={styles.searchContainer}>\r\n            <div className=\"form-group\">\r\n                <input\r\n                    className={`form-control ${styles.inputSearch}`}\r\n                    type=\"text\"\r\n                    spellCheck=\"false\"\r\n                    ref={inputRef}\r\n                    value={pageState.inputValue}\r\n                    onChange={handleInputChange}\r\n                    onKeyDown={handleKeyPress}\r\n                />\r\n            </div>\r\n\r\n            {pageState.showOptions && pageState.options.length !== 0 && (\r\n                <div className={styles.optionsContainer}>\r\n                {pageState.options.map((option, index) => (\r\n                    <div\r\n                    key={option}\r\n                    className={\r\n                        index === pageState.activeIndex ? styles.activeOption : styles.option\r\n                    }\r\n                    onClick={() => onSelectOption(option)}\r\n                    dangerouslySetInnerHTML={{ __html: highlightOption(option) }}\r\n                    />\r\n                ))}\r\n                </div>\r\n            )}        \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AutoComplete;\r\n","import React from \"react\";\r\nimport AutoComplete from \"../../Components/AutoComplete\";\r\n\r\nconst Dashboard = () => (\r\n  <div className=\"row\">\r\n    <div className=\"col-md-12\">\r\n      <div className=\"col-md-4 offset-md-4\">\r\n        <AutoComplete />\r\n      </div>\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default Dashboard;\r\n","import React from \"react\";\r\nimport { Route, BrowserRouter as Router, Redirect } from \"react-router-dom\";\r\nimport Dashboard from \"../Pages/Dashboard\";\r\n\r\nconst Routes = () => (\r\n  <Router basename={process.env.PUBLIC_URL || ''}>\r\n    <Route path=\"/\" component={Dashboard} />\r\n    <Redirect from=\"*\" to=\"/\" />\r\n  </Router>\r\n);\r\n\r\nexport default Routes;\r\n","import React from \"react\";\r\nimport Routes from \"./Routes\";\r\n\r\nconst App = () => {\r\n return (\r\n  <Routes />\r\n );\r\n};\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"searchContainer\":\"AutoComplete_searchContainer__ZEwL5\",\"inputSearch\":\"AutoComplete_inputSearch__2OyF-\",\"optionsContainer\":\"AutoComplete_optionsContainer__1b1Bo\",\"option\":\"AutoComplete_option__11uOQ\",\"activeOption\":\"AutoComplete_activeOption__3PvE3\",\"highlight\":\"AutoComplete_highlight__3VNEI\"};"],"sourceRoot":""}